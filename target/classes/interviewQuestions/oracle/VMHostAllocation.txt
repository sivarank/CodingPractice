
host1   host2    host2

cpu a    cpu b  cpu c    
mem A    mem B  mem C

cpu f
mem A
vm1 
VM2


VM1      VM2    VM3   VM4 
cpu x    
mem X
host1    host1   host2




reserve hosts                  avialble hosts                   capacityFull Hosts           

host1 , host2, host3                  host1  -> host2                                              
                                                              
                                                              
                                                            
                                                              
                                     host1 
                                     
                     
                     
Host1 
72 cpus        200 CPU   250 CPU
512 MB         1000 GB 


VM
2 cpu                     
4
8 16





1 million hosts .. 

500k 16 cpus..  8 cpus ~ 125K 



bucket1 (1 - 6 GB RAM) 
bucket2 (7 - 12 GB RAM)  6                       
bucket3

class Bucket{
  String bucketID;
  List<HostInfo> hosts;
  //double cpuFree; // 
  double memFree;  // 8.00  - 13  
}

List<Bucket> buckets = new ArrayList<>();



def assign( buckets, Instance(4cpu, 24 GB))
{
     int bucketID = 24 /6 ; 4th  


}




Host getMatchHost(ArrayList<Bucket> buckets, double mem, doubel cpu){
    int bucketID = mem/BUCKET_SIZE;  // BUCKET_SIZE = 6
    Bucket bucket=  buckets.get(bucketID);
    
    for(HostInfo host:bucket.getHosts()){
      if(matchRequirement(host, mem, cpu)){
         return host;
      }
    }

    while()
    
    
}